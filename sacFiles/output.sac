/*import:*/
use StdIO : all;/*import:*/
use Array : all;/*unprocessed:int func*/int func(/*unprocessed:int x)*/int x){
/*unprocessed:return x + 3;*/return x + 3;/*unprocessed:}

int[*] recFunc*/}

int[*] recFunc(/*unprocessed:int[*] arr)*/int[*] arr)   {
/*unprocessed:if*/if(/*unprocessed:dim*/dim(/*unprocessed:arr) == 0)*/arr) == 0)      {
/*unprocessed:res = func*/res = func(/*unprocessed:arr);*/arr);/*unprocessed:}
   else*/}
   else         {
/*unprocessed:res = with*/res = with            {
/*unprocessed:*/(/*unprocessed:.<= [i] < take*/.<= [i] < take(/*unprocessed:[1], shape*/[1], shape(/*unprocessed:arr))) : recFunc*/arr))) : recFunc(/*unprocessed:arr[i]);*/arr[i]);/*unprocessed:}:modarray*/}:modarray(/*unprocessed:arr);*/arr);/*unprocessed:}
   return res;*/}
   return res;/*unprocessed:}*/})/*unprocessed:*/)/*unprocessed:*/)/*unprocessed:*/)/*unprocessed:*/)/*unprocessed:*/            }/*unprocessed:*/         }/*unprocessed:*/)/*unprocessed:*/      }/*unprocessed:*/)/*unprocessed:*/)/*unprocessed:*/   }/*unprocessed:*/)/*unprocessed:*/}/*unprocessed:*/)/*Whitespace*/


/*import:
import:
unprocessed:int func
(unprocessed:int x)
Brackets:{
unprocessed:return x + 3;
unprocessed:}

int[*] recFunc
   (unprocessed:int[*] arr)
   Brackets:{
   unprocessed:if
      (unprocessed:dim
      (unprocessed:arr) == 0)
      Brackets:{
      unprocessed:res = func
         (unprocessed:arr);
unprocessed:}
   else
         Brackets:{
         unprocessed:res = with
            Brackets:{
            unprocessed:
               (unprocessed:.<= [i] < take
               (unprocessed:[1], shape
               (unprocessed:arr))) : recFunc
               (unprocessed:arr[i]);
unprocessed:}:modarray
               (unprocessed:arr);
unprocessed:}
   return res;
unprocessed:})
unprocessed:)
unprocessed:)
unprocessed:)
unprocessed:)
unprocessed:            }
unprocessed:         }
unprocessed:)
unprocessed:      }
unprocessed:)
unprocessed:)
unprocessed:   }
unprocessed:)
unprocessed:}
unprocessed:)
Whitespace*/